// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tests.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tests_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tests_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "engine.pb.h"
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tests_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tests_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tests_2eproto;
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace test {
class Run_Request;
struct Run_RequestDefaultTypeInternal;
extern Run_RequestDefaultTypeInternal _Run_Request_default_instance_;
class Run_Response;
struct Run_ResponseDefaultTypeInternal;
extern Run_ResponseDefaultTypeInternal _Run_Response_default_instance_;
}  // namespace test
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::wazuh::api::engine::test::Run_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::test::Run_Request>(Arena*);
template<> ::com::wazuh::api::engine::test::Run_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::test::Run_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace test {

enum DebugMode : int {
  ONLY_OUTPUT = 0,
  OUTPUT_AND_TRACES = 1,
  OUTPUT_AND_TRACES_WITH_DETAILS = 2,
  DebugMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DebugMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DebugMode_IsValid(int value);
constexpr DebugMode DebugMode_MIN = ONLY_OUTPUT;
constexpr DebugMode DebugMode_MAX = OUTPUT_AND_TRACES_WITH_DETAILS;
constexpr int DebugMode_ARRAYSIZE = DebugMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugMode_descriptor();
template<typename T>
inline const std::string& DebugMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DebugMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DebugMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DebugMode_descriptor(), enum_t_value);
}
inline bool DebugMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DebugMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DebugMode>(
    DebugMode_descriptor(), name, value);
}
// ===================================================================

class Run_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.test.Run_Request) */ {
 public:
  inline Run_Request() : Run_Request(nullptr) {}
  ~Run_Request() override;
  explicit PROTOBUF_CONSTEXPR Run_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Run_Request(const Run_Request& from);
  Run_Request(Run_Request&& from) noexcept
    : Run_Request() {
    *this = ::std::move(from);
  }

  inline Run_Request& operator=(const Run_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Run_Request& operator=(Run_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Run_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Run_Request* internal_default_instance() {
    return reinterpret_cast<const Run_Request*>(
               &_Run_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Run_Request& a, Run_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Run_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Run_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Run_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Run_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Run_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Run_Request& from) {
    Run_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Run_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.test.Run_Request";
  }
  protected:
  explicit Run_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyFieldNumber = 1,
    kEventFieldNumber = 2,
    kProtocolqueueFieldNumber = 3,
    kDebugmodeFieldNumber = 4,
  };
  // optional string policy = 1;
  bool has_policy() const;
  private:
  bool _internal_has_policy() const;
  public:
  void clear_policy();
  const std::string& policy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy();
  PROTOBUF_NODISCARD std::string* release_policy();
  void set_allocated_policy(std::string* policy);
  private:
  const std::string& _internal_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy(const std::string& value);
  std::string* _internal_mutable_policy();
  public:

  // optional .google.protobuf.Value event = 2;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::PROTOBUF_NAMESPACE_ID::Value& event() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Value* release_event();
  ::PROTOBUF_NAMESPACE_ID::Value* mutable_event();
  void set_allocated_event(::PROTOBUF_NAMESPACE_ID::Value* event);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Value& _internal_event() const;
  ::PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::PROTOBUF_NAMESPACE_ID::Value* event);
  ::PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_event();

  // optional uint32 protocolqueue = 3;
  bool has_protocolqueue() const;
  private:
  bool _internal_has_protocolqueue() const;
  public:
  void clear_protocolqueue();
  uint32_t protocolqueue() const;
  void set_protocolqueue(uint32_t value);
  private:
  uint32_t _internal_protocolqueue() const;
  void _internal_set_protocolqueue(uint32_t value);
  public:

  // optional .com.wazuh.api.engine.test.DebugMode debugmode = 4;
  bool has_debugmode() const;
  private:
  bool _internal_has_debugmode() const;
  public:
  void clear_debugmode();
  ::com::wazuh::api::engine::test::DebugMode debugmode() const;
  void set_debugmode(::com::wazuh::api::engine::test::DebugMode value);
  private:
  ::com::wazuh::api::engine::test::DebugMode _internal_debugmode() const;
  void _internal_set_debugmode(::com::wazuh::api::engine::test::DebugMode value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.test.Run_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_;
    ::PROTOBUF_NAMESPACE_ID::Value* event_;
    uint32_t protocolqueue_;
    int debugmode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tests_2eproto;
};
// -------------------------------------------------------------------

class Run_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.test.Run_Response) */ {
 public:
  inline Run_Response() : Run_Response(nullptr) {}
  ~Run_Response() override;
  explicit PROTOBUF_CONSTEXPR Run_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Run_Response(const Run_Response& from);
  Run_Response(Run_Response&& from) noexcept
    : Run_Response() {
    *this = ::std::move(from);
  }

  inline Run_Response& operator=(const Run_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Run_Response& operator=(Run_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Run_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Run_Response* internal_default_instance() {
    return reinterpret_cast<const Run_Response*>(
               &_Run_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Run_Response& a, Run_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Run_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Run_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Run_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Run_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Run_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Run_Response& from) {
    Run_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Run_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.test.Run_Response";
  }
  protected:
  explicit Run_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kOutputFieldNumber = 3,
    kTracesFieldNumber = 4,
    kStatusFieldNumber = 1,
  };
  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // optional .google.protobuf.Value output = 3;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::PROTOBUF_NAMESPACE_ID::Value& output() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Value* release_output();
  ::PROTOBUF_NAMESPACE_ID::Value* mutable_output();
  void set_allocated_output(::PROTOBUF_NAMESPACE_ID::Value* output);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Value& _internal_output() const;
  ::PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_output();
  public:
  void unsafe_arena_set_allocated_output(
      ::PROTOBUF_NAMESPACE_ID::Value* output);
  ::PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_output();

  // optional .google.protobuf.Value traces = 4;
  bool has_traces() const;
  private:
  bool _internal_has_traces() const;
  public:
  void clear_traces();
  const ::PROTOBUF_NAMESPACE_ID::Value& traces() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Value* release_traces();
  ::PROTOBUF_NAMESPACE_ID::Value* mutable_traces();
  void set_allocated_traces(::PROTOBUF_NAMESPACE_ID::Value* traces);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Value& _internal_traces() const;
  ::PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_traces();
  public:
  void unsafe_arena_set_allocated_traces(
      ::PROTOBUF_NAMESPACE_ID::Value* traces);
  ::PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_traces();

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.test.Run_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::PROTOBUF_NAMESPACE_ID::Value* output_;
    ::PROTOBUF_NAMESPACE_ID::Value* traces_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tests_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Run_Request

// optional string policy = 1;
inline bool Run_Request::_internal_has_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Run_Request::has_policy() const {
  return _internal_has_policy();
}
inline void Run_Request::clear_policy() {
  _impl_.policy_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Run_Request::policy() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Run_Request.policy)
  return _internal_policy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Run_Request::set_policy(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.policy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.Run_Request.policy)
}
inline std::string* Run_Request::mutable_policy() {
  std::string* _s = _internal_mutable_policy();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.Run_Request.policy)
  return _s;
}
inline const std::string& Run_Request::_internal_policy() const {
  return _impl_.policy_.Get();
}
inline void Run_Request::_internal_set_policy(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.policy_.Set(value, GetArenaForAllocation());
}
inline std::string* Run_Request::_internal_mutable_policy() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.policy_.Mutable(GetArenaForAllocation());
}
inline std::string* Run_Request::release_policy() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.Run_Request.policy)
  if (!_internal_has_policy()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.policy_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.policy_.IsDefault()) {
    _impl_.policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Run_Request::set_allocated_policy(std::string* policy) {
  if (policy != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.policy_.SetAllocated(policy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.policy_.IsDefault()) {
    _impl_.policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.Run_Request.policy)
}

// optional .google.protobuf.Value event = 2;
inline bool Run_Request::_internal_has_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.event_ != nullptr);
  return value;
}
inline bool Run_Request::has_event() const {
  return _internal_has_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& Run_Request::_internal_event() const {
  const ::PROTOBUF_NAMESPACE_ID::Value* p = _impl_.event_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& Run_Request::event() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Run_Request.event)
  return _internal_event();
}
inline void Run_Request::unsafe_arena_set_allocated_event(
    ::PROTOBUF_NAMESPACE_ID::Value* event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.event_);
  }
  _impl_.event_ = event;
  if (event) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.test.Run_Request.event)
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Run_Request::release_event() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.event_;
  _impl_.event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Run_Request::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.Run_Request.event)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.event_;
  _impl_.event_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Run_Request::_internal_mutable_event() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.event_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Value>(GetArenaForAllocation());
    _impl_.event_ = p;
  }
  return _impl_.event_;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Run_Request::mutable_event() {
  ::PROTOBUF_NAMESPACE_ID::Value* _msg = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.Run_Request.event)
  return _msg;
}
inline void Run_Request::set_allocated_event(::PROTOBUF_NAMESPACE_ID::Value* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.event_);
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event));
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.event_ = event;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.Run_Request.event)
}

// optional uint32 protocolqueue = 3;
inline bool Run_Request::_internal_has_protocolqueue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Run_Request::has_protocolqueue() const {
  return _internal_has_protocolqueue();
}
inline void Run_Request::clear_protocolqueue() {
  _impl_.protocolqueue_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Run_Request::_internal_protocolqueue() const {
  return _impl_.protocolqueue_;
}
inline uint32_t Run_Request::protocolqueue() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Run_Request.protocolqueue)
  return _internal_protocolqueue();
}
inline void Run_Request::_internal_set_protocolqueue(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.protocolqueue_ = value;
}
inline void Run_Request::set_protocolqueue(uint32_t value) {
  _internal_set_protocolqueue(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.Run_Request.protocolqueue)
}

// optional .com.wazuh.api.engine.test.DebugMode debugmode = 4;
inline bool Run_Request::_internal_has_debugmode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Run_Request::has_debugmode() const {
  return _internal_has_debugmode();
}
inline void Run_Request::clear_debugmode() {
  _impl_.debugmode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::com::wazuh::api::engine::test::DebugMode Run_Request::_internal_debugmode() const {
  return static_cast< ::com::wazuh::api::engine::test::DebugMode >(_impl_.debugmode_);
}
inline ::com::wazuh::api::engine::test::DebugMode Run_Request::debugmode() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Run_Request.debugmode)
  return _internal_debugmode();
}
inline void Run_Request::_internal_set_debugmode(::com::wazuh::api::engine::test::DebugMode value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.debugmode_ = value;
}
inline void Run_Request::set_debugmode(::com::wazuh::api::engine::test::DebugMode value) {
  _internal_set_debugmode(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.Run_Request.debugmode)
}

// -------------------------------------------------------------------

// Run_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void Run_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus Run_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus Run_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Run_Response.status)
  return _internal_status();
}
inline void Run_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void Run_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.Run_Response.status)
}

// optional string error = 2;
inline bool Run_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Run_Response::has_error() const {
  return _internal_has_error();
}
inline void Run_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Run_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Run_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Run_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.test.Run_Response.error)
}
inline std::string* Run_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.Run_Response.error)
  return _s;
}
inline const std::string& Run_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void Run_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* Run_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* Run_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.Run_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Run_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.Run_Response.error)
}

// optional .google.protobuf.Value output = 3;
inline bool Run_Response::_internal_has_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.output_ != nullptr);
  return value;
}
inline bool Run_Response::has_output() const {
  return _internal_has_output();
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& Run_Response::_internal_output() const {
  const ::PROTOBUF_NAMESPACE_ID::Value* p = _impl_.output_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& Run_Response::output() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Run_Response.output)
  return _internal_output();
}
inline void Run_Response::unsafe_arena_set_allocated_output(
    ::PROTOBUF_NAMESPACE_ID::Value* output) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_);
  }
  _impl_.output_ = output;
  if (output) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.test.Run_Response.output)
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Run_Response::release_output() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.output_;
  _impl_.output_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Run_Response::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.Run_Response.output)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.output_;
  _impl_.output_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Run_Response::_internal_mutable_output() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.output_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Value>(GetArenaForAllocation());
    _impl_.output_ = p;
  }
  return _impl_.output_;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Run_Response::mutable_output() {
  ::PROTOBUF_NAMESPACE_ID::Value* _msg = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.Run_Response.output)
  return _msg;
}
inline void Run_Response::set_allocated_output(::PROTOBUF_NAMESPACE_ID::Value* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_);
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output));
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.output_ = output;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.Run_Response.output)
}

// optional .google.protobuf.Value traces = 4;
inline bool Run_Response::_internal_has_traces() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.traces_ != nullptr);
  return value;
}
inline bool Run_Response::has_traces() const {
  return _internal_has_traces();
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& Run_Response::_internal_traces() const {
  const ::PROTOBUF_NAMESPACE_ID::Value* p = _impl_.traces_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& Run_Response::traces() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.test.Run_Response.traces)
  return _internal_traces();
}
inline void Run_Response::unsafe_arena_set_allocated_traces(
    ::PROTOBUF_NAMESPACE_ID::Value* traces) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.traces_);
  }
  _impl_.traces_ = traces;
  if (traces) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.test.Run_Response.traces)
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Run_Response::release_traces() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.traces_;
  _impl_.traces_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Run_Response::unsafe_arena_release_traces() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.test.Run_Response.traces)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.traces_;
  _impl_.traces_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Run_Response::_internal_mutable_traces() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.traces_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Value>(GetArenaForAllocation());
    _impl_.traces_ = p;
  }
  return _impl_.traces_;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Run_Response::mutable_traces() {
  ::PROTOBUF_NAMESPACE_ID::Value* _msg = _internal_mutable_traces();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.test.Run_Response.traces)
  return _msg;
}
inline void Run_Response::set_allocated_traces(::PROTOBUF_NAMESPACE_ID::Value* traces) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.traces_);
  }
  if (traces) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(traces));
    if (message_arena != submessage_arena) {
      traces = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traces, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.traces_ = traces;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.test.Run_Response.traces)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::wazuh::api::engine::test::DebugMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::wazuh::api::engine::test::DebugMode>() {
  return ::com::wazuh::api::engine::test::DebugMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tests_2eproto
